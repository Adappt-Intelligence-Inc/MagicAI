diff --git a/src/broadcast/include/webrtc/peer.h b/src/broadcast/include/webrtc/peer.h
index cc5489e..3adeaf8 100644
--- a/src/broadcast/include/webrtc/peer.h
+++ b/src/broadcast/include/webrtc/peer.h
@@ -7,7 +7,7 @@
 #include "muxframe.h"
 #include "framefilter.h"
 #include <mutex>
-
+#include "api/data_channel_interface.h"
 #include "api/jsep.h"
 #include <json/json.hpp>
 using json = nlohmann::json;
@@ -18,11 +18,12 @@ namespace base
 namespace web_rtc
 {
 
+typedef void (*DATAFROMEDATECHANNELREADY_CALLBACK)(const char* msg);
+typedef void (*FAILURE_CALLBACK)(const char* msg);
 
 class PeerManager;
 
-
-class Peer : public webrtc::PeerConnectionObserver, public webrtc::CreateSessionDescriptionObserver
+class Peer : public webrtc::PeerConnectionObserver, public webrtc::CreateSessionDescriptionObserver,public webrtc::DataChannelObserver
 {
 public:
     enum Mode
@@ -106,13 +107,15 @@ protected:
         OnRemoveStream(rtc::scoped_refptr<webrtc::MediaStreamInterface> stream) override;  ///< since 7f0676
     virtual void OnDataChannel(rtc::scoped_refptr<webrtc::DataChannelInterface> stream) override;  ///< since 7f0676
     
-   //virtual void OnDataChannelAdded(const DataChannel& data_channel) override;  ///< since 7f0676
-    
-    
-     virtual void OnDataReceived(int channel_id,
-                      webrtc::DataMessageType type,
-                      const rtc::CopyOnWriteBuffer& buffer) override;
-    
+    void OnMessage(const webrtc::DataBuffer& buffer) override;
+    DATAFROMEDATECHANNELREADY_CALLBACK OnDataFromDataChannelReady = nullptr;
+    FAILURE_CALLBACK OnFailureMessage = nullptr;
+    void RegisterOnDataFromDataChannelReady(
+      DATAFROMEDATECHANNELREADY_CALLBACK callback);
+    void RegisterOnFailure(FAILURE_CALLBACK callback);
+    void OnStateChange() override;
+  
+
     virtual void OnIceCandidate(const webrtc::IceCandidateInterface *candidate) override;
     virtual void OnSignalingChange(webrtc::PeerConnectionInterface::SignalingState new_state) override;
     virtual void OnIceConnectionChange(webrtc::PeerConnectionInterface::IceConnectionState new_state) override;
diff --git a/src/broadcast/src/peer.cpp b/src/broadcast/src/peer.cpp
index 60c6e61..8e942fe 100644
--- a/src/broadcast/src/peer.cpp
+++ b/src/broadcast/src/peer.cpp
@@ -380,26 +380,46 @@ void Peer::OnRemoveStream(rtc::scoped_refptr<webrtc::MediaStreamInterface> strea
 }
 
 
-void Peer::OnDataChannel(rtc::scoped_refptr<webrtc::DataChannelInterface> stream)
+void Peer::OnDataChannel(rtc::scoped_refptr<webrtc::DataChannelInterface> channel)
 {
+    channel->RegisterObserver(this);
     //LInfo(_peerid, ": OnDataChannel") assert(0 && "virtual");
-    data_channel_ = stream;
+     data_channel_ = channel;
     //DataChannelSend("hello data channel");
 }
 
-  void Peer::OnDataReceived(int channel_id,
-                      webrtc::DataMessageType type,
-                      const rtc::CopyOnWriteBuffer& buffer)
- {
-     DataChannelSend("hello data channel");
- }
-//
-//void Peer::OnDataChannelAdded(const DataChannel& data_channe)
-//{
-//    //LInfo(_peerid, ": OnDataChannel") assert(0 && "virtual");
-//    //data_channel_ = stream;
-//    DataChannelSend("hello data channel");
-//}
+ void Peer::OnStateChange() {
+  if (data_channel_) {
+    webrtc::DataChannelInterface::DataState state = data_channel_->state();
+    if (state == webrtc::DataChannelInterface::kOpen) {
+      //if (OnLocalDataChannelReady)
+      //  OnLocalDataChannelReady();
+      RTC_LOG(LS_INFO) << "Data channel is open";
+    }
+  }
+}
+
+
+void Peer::RegisterOnDataFromDataChannelReady(
+    DATAFROMEDATECHANNELREADY_CALLBACK callback) {
+  OnDataFromDataChannelReady = callback;
+}
+
+void Peer::RegisterOnFailure(FAILURE_CALLBACK callback) {
+  OnFailureMessage = callback;
+}
+
+
+//  A data buffer was successfully received.
+void Peer::OnMessage(const webrtc::DataBuffer& buffer) {
+  size_t size = buffer.data.size();
+  char* msg = new char[size + 1];
+  memcpy(msg, buffer.data.data(), size);
+  msg[size] = 0;
+  if (OnDataFromDataChannelReady)
+    OnDataFromDataChannelReady(msg);
+  delete[] msg;
+}
 
 
 void Peer::OnAddStream(webrtc::MediaStreamInterface *stream)
